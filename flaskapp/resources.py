from flaskapp import api, db, bcrypt
from flask_restful import Resource, reqparse
from flaskapp.models import User
from flask_jwt import jwt_required, current_identity

class HelloWorld(Resource):
    def get(self):
        return {'hello': 'world'}

api.add_resource(HelloWorld, '/')

# Login auto generated by flask_jwt at /auth

'''
Create user via curl command:
curl -i -X POST -H "Content-Type: application/json" -d '{\"username\": \"username\", \"email\": \"test@example.com\", \"password\": \"passwordpassword\"}' http://127.0.0.1:5000/register

Get token:
curl -i -X POST -H "Content-Type: application/json" -d '{\"username\": \"username\", \"password\": \"passwordpassword\"}' http://127.0.0.1:5000/auth

Access protected pages:
curl -i -X GET -H "Authorization: JWT <token>" http://127.0.0.1:5000/protected
'''

register_parser = reqparse.RequestParser()
register_parser.add_argument('username', required=True)
register_parser.add_argument('email', required=True)
register_parser.add_argument('password', required=True)
class RegisterUser(Resource):
    def post(self):
        args = register_parser.parse_args()
        
        if User.query.filter_by(username=args['username']).first():
            return {'error': 'Username already taken'}, 400
        elif User.query.filter_by(email=args['email']).first():
            return {'error': 'Email already taken'}, 400
        elif len(args['password']) < 12 or len(args['password']) > 2000:
            return {'error': 'Password must be at least 12 characters'}, 400

        pw_hash = bcrypt.generate_password_hash(args['password'])
        new_user = User(username=args['username'], pw_hash=pw_hash, email=args['email'])
        db.session.add(new_user)

        try:
            db.session.commit()
        except Exception:
            return {'error': 'Internal server error'}, 500

        return {'response': 'success'}, 201

api.add_resource(RegisterUser, '/register')

class ProtectedTest(Resource):
    @jwt_required()
    def get(self):
        return {'identity': str(current_identity)}

api.add_resource(ProtectedTest, '/protected')